from class_operation import Operation
import pandas as pd
import datetime

class Logs:
    def __init__(self):
        self.data = []

    def add_log(self, operation: Operation):
        # Convertimos los campos indicados a un diccionario plano
        datalog = {
            "ID": operation.ID,
            "Concepto": operation.Concept,
            "Fecha_Creacion": operation.CreationDate,
            "Fecha_Ejecucion": operation.EffectiveDate,
            "Importe": operation.Value,
            "IsIncome": operation.IsIncome,
            "To": operation.To,
            "CreatedBy": operation.CreatedBy
        }
        self.data.append(datalog)

    def get_log(self, OperationID: int):
        for log in self.data:
            if log["ID"] == OperationID:
                return log
        return None

    def remove_log(self, logID: int):
        log = self.get_log(logID)
        if log:
            self.data.remove(log)
            print(f"La operación '{log['ID']}: {log['Concepto']}' creada el {log['Fecha_Creacion']} ha sido eliminada")
        else:
            print("Error, no existe ninguna operación asociada a este ID")




    def view_logs(self, show_columns=None):
        if not self.data:
            print("Todavía no se ha registrado ninguna operación")
            return

        df = pd.DataFrame(self.data)

        base_columns = ["ID", "Concepto", "Fecha_Creacion", "Fecha_Ejecucion", "Importe", "IsIncome"]

        # Añadir columnas adicionales manteniendo el orden y evitando duplicados
        if show_columns:
            showing_columns = base_columns + [col for col in show_columns if col not in base_columns]
        else:
            showing_columns = base_columns

        final_columns = [col for col in showing_columns if col in df.columns]
        print("\n", df[final_columns], "\n")



    def filter(self, **criteria):
        if not self.data:
            print("Aún no se han añadido operaciones")
            return pd.DataFrame()
        
        df = pd.DataFrame(self.data)
        for key, value in criteria.items():
            if key not in df.columns:
                print(f"Advertencia: La columna '{key}' no existe")
                continue
            df = df[df[key] == value]
        print(df, "\n")

if __name__ == "__main__":

    logs = Logs()
    op1 = Operation(1, datetime.date(2025,7,1), "Pago Luz", 100.0, False, To="Endesa", CreatedBy="Usuario1")
    op2 = Operation(2, datetime.date(2025,7,2), "Sueldo", 1500.0, True, CreatedBy="EmpresaX")

    logs.add_log(op1)
    logs.add_log(op2)



    logs.filter()
    logs.view_logs(show_columns=["To"])
   



    #ToDo
    #def add_recursive (falta esto)
    #Falta pensar en como mostrar resultados con el filter y como crear la interfaz para que funcione con comandos sencillos
    


